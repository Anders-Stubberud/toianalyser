import pandas as pd
import os
import subprocess
from pylatex import Document, Section, Tabular, Package

def save(data, filename_base):
    # Create a DataFrame from the list of dictionaries
    df = pd.DataFrame(data)

    # Initialize LaTeX document
    doc = Document()
    doc.preamble.append(Package('geometry', options=['landscape']))  # Set landscape mode

    # Add title and section
    with doc.create(Section('Data Table')):
        # Create a table in LaTeX
        num_columns = len(df.columns)
        col_format = '|' + 'l|' * num_columns  # Create column format string
        with doc.create(Tabular(col_format)) as table:
            # Add header
            table.add_hline()
            table.add_row(df.columns)
            table.add_hline()
            
            # Add rows
            for index, row in df.iterrows():
                table.add_row(row.tolist())
                table.add_hline()

    # Write LaTeX code to .tex file
    tex_filename = f"{filename_base}.tex"
    doc.generate_tex(tex_filename)

    # Compile LaTeX to PDF using pdflatex
    pdf_filename = f"{filename_base}.pdf"
    try:
        subprocess.run(['pdflatex', tex_filename], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error occurred during LaTeX compilation: {e}")

    # Move the generated PDF to the desired location
    if os.path.exists(f"{filename_base}.pdf"):
        os.rename(f"{filename_base}.pdf", pdf_filename)
    
    # Clean up auxiliary files generated by pdflatex
    for ext in ['.aux', '.log', '.tex']:
        file_path = f"{filename_base}{ext}"
        if os.path.exists(file_path):
            os.remove(file_path)

# Example usage
df = pl.read_csv(os.path.join(path_resultater, 'aksellastfordeling.csv'))

for axlegroup in ['Enkeltaksler', 'Boggiaksler', 'Trippelaksler']:
    print(axlegroup)

    weight_columns = [col for col in df.columns if '-' in col]
    dfs = df.filter(pl.col('axlegroup') == axlegroup)
    dfs = dfs.groupby('location').agg([
        pl.col(col).sum().alias(col) for col in weight_columns
    ])

    column_sums = dfs.select([
        pl.col(c).sum().alias(c) for c in dfs.columns if c not in ["location", "axlegroup", "startdate", "enddate", "mean", "median"]
    ])

    sum_row_df = pl.DataFrame({
        "location": ["Total"],
        **column_sums.to_dict(False)
    })

    updated_df = dfs.vstack(sum_row_df)

    dics = []

    for row in updated_df.iter_rows(named=True):
        sted = row['location']
        sum_vekt = sum(row[vektspenn] for vektspenn in row.keys() if '-' in vektspenn)
        dic = {'Sted': sted} | {vektspenn.strip(' tonn'): round(100 * row[vektspenn] / sum_vekt, 2) for vektspenn in row.keys() if '-' in vektspenn}
        dics.append(dic)

    pd.DataFrame(data=dics).to_csv(axlegroup + '.csv')